/* Given a singly linked list, determine if its a palindrome. Return 1 or 0 denoting if its a palindrome or not, respectively.

Notes:

Expected solution is linear in time and constant in space.
For example,

List 1-->2-->1 is a palindrome.
List 1-->2-->3 is not a palindrome. */

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public int lPalin(ListNode A) {
        int isPalindrome = 0;
        ListNode node = A;
        Stack<ListNode> stack = new Stack<>();
        
        while(node != null) {
            stack.push(node);
            node = node.next;    
        }
        
        node = A;
        while(node != null && !stack.isEmpty()) {
            int data = stack.pop().val;
            if(node.val == data) {
                isPalindrome = 1;
                node = node.next;
            }
            else {
                isPalindrome = 0;
                break;
            }
        }
        
        return isPalindrome;
    }
}

