/* subarray within an array (containing at least one number) which has the largest sum.

For example:

Given the array [-2,1,-3,4,-1,2,1,-5,4],

the contiguous subarray [4,-1,2,1] has the largest sum = 6.

For this problem, return the maximum sum.

Note: 	 Implement the given function.
	 Do not read input instead use the arguments to the function. 
	 Do not print the output, instead return values as specified. */

public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int maxSubArray(final List<Integer> A) {
        int [] arr = A.stream().mapToInt(Integer::intValue).toArray();
        int sum = 0, max = Integer.MIN_VALUE;
        if(arr.length == 0){
            max = 0;
        }
        else if(arr.length == 1){
            max = arr[0];
        }
        else {
            for(int i = 0; i < arr.length; i++) {
                sum += arr[i];
                if(sum > max) {
                     max = sum;
                }
                
                if (sum < 0) 
                {
                    sum = 0;
                }
                   
            }
        }    
        
        return max;
    }
}
